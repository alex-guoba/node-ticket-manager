// Generated by CoffeeScript 1.10.0
(function() {
  var EMPTY_ARRAY, Worker, mongoose, oauth;

  oauth = require("./utils/oauth");

  EMPTY_ARRAY = [];

  mongoose = require('mongoose');

  Worker = mongoose.model('Worker');

  exports.authWorker = function(req, res, next) {
    var signature, workerId;
    signature = req.headers['ticketman-authenticate'];
    if (!((signature != null) && signature.indexOf("Ticketman") === 0)) {
      return next(new Error("signature checking failed"));
    }
    workerId = (signature.match(/Ticketman ([^:]+)/) || EMPTY_ARRAY)[1];
    signature = (signature.match(/:([^:]+)/) || EMPTY_ARRAY)[1];
    if (!((workerId != null) && (signature != null))) {
      return next(new Error("invalid signature"));
    }
    Worker.findById(workerId, function(err, worker) {
      var fullUrl;
      if (err != null) {
        return next(err);
      }
      if (!worker) {
        return next(new Error("missing worker " + workerId));
      }
      if (worker.trashed_at != null) {
        next(new Error("worker trashed"));
      }
      if (oauth.verify(signature, req.method, req.url, req.body, worker['consumer_secret'])) {
        req.worker = worker;
        next();
      } else {
        fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;
        if (oauth.verify(signature, req.method, fullUrl, req.body, worker['consumer_secret'])) {
          req.worker = worker;
          next();
        } else {
          next(new Error("signature mismatch"));
        }
      }
    });
  };

  exports.updateWorkerAt = function(req, res, next) {
    var signature, workerId;
    signature = req.headers['ticketman-authenticate'];
    workerId = (signature.match(/Ticketman ([^:]+)/) || EMPTY_ARRAY)[1];
    return Worker.findByIdAndUpdate(workerId, {
      updated_at: Date.now()
    }, function(err, worker) {
      if (err != null) {
        return next(err);
      }
      return next();
    });
  };

}).call(this);
